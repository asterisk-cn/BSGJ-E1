@startuml Class
skinparam classAttributeIconSize 0
hide empty members

namespace Players {
    class PlayerParameters{
        + int health
        + int unionCount
    }

    class CharacterParameters{
        + float moveSpeed
    }

    class PlayerInputs{
        + Vector2 LeftMove
        + Vector2 RightMove
        + bool Attack

        + void OnLeftMove(InputValue value)
        + void OnRightMove(InputValue value)
        + void OnAttack(InputValue value)
    }


    class PlayerCore {
        + bool isAlive
        - PlayerInputs _inputs
        - PlayerCharacter _character1
        - PlayerCharacter _character2
        - List<PlayerPartial> _partialPrefabs

        - PlayerParameters _defaultParameters
        - PlayerParameters _currentParameters

        + void TakeDamage(int damage)
        + void AddUnionCount()
        + GeneratePartial()
        + void Die()
        - void Move()
        - void Attack()
    }

    PlayerCore --> PlayerInputs
    PlayerCore *-- PlayerParameters

    class PlayerCharacter {
        - CharacterParameters _defaultParameters
        - CharacterParameters _currentParameters

        + void Move(Vector3 direction)
        + void UnitePartial(PlayerPartial partial)
    }

    PlayerCore *-- PlayerCharacter
    PlayerCharacter *-- CharacterParameters

    class PlayerPartial {
        - CharacterParameters _defaultParameters
        - CharacterParameters _currentParameters

        + void Move(Vector3 direction)
        - OnTriggerEnter(Collider other)
    }

    PlayerCore --> PlayerPartial
    PlayerPartial *-- CharacterParameters
}

namespace Enemy {
    class EnemyCore {
        + bool isAlive
        + int health
        - int _currentHealth
        + int attackCount
        - int _currentAttackCount
        - List<EnemyAttack> _attackPrefabs

        + void TakeDamage(int damage)
        + void Die()
        - void GenerateAttack()
    }

    class AttackParameters {
        + float moveSpeed
        + float chaseTime
        + float remainTime
    }

    class EnemyAttack {
        + bool isActive
        - AttackParameters _parameters
        - PlayerCharacter _target
        - float moveSpeed

        + void SetTarget(PlayerCharacter target)
        - void Move()
        - void Attack()
        - void OnTriggerEnter(Collider other)
    }

    EnemyCore *-- EnemyAttack

    class Knife
    class Pot
    Class Rod

    EnemyAttack <|-- Knife
    EnemyAttack <|-- Pot
    EnemyAttack <|-- Rod
}

namespace GameManagers {
    class MainGameManager {
        + GameState state
        - GameTimeManager _timeManager
    }

    enum GameState{
        + Title
        + Run
        + Fight
        + Result
    }

    class GameTimeManager

    MainGameManager --> GameTimeManager
}

@enduml
